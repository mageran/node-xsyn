%codeStart: '<expr>'
%codeEnd: '</expr>'

{%

%}

Start : Expr {%
function(expr) {
	console.log('processing...');
	return this.processExpr(expr);
}
%};

Expr : Term plusMinus Expr {% $$ = { ops : [$1,$3], op : $2 }; %}
     | Term
     ;
     
Term : Factor multDiv Term {% $$ = { ops : [$1,$3], op : $2 }; %}
     | Factor
     ;
     
Factor : PrimExpr 
       | '(' Expr ')' {% $$ = $2; %}
       ;

PrimExpr : number;
     
plusMinus : '+' | '-' ;
multDiv : '*' | '/' ;

{%

this.processExpr = function(obj) {
	if (typeof(obj) === 'number') {
		return obj;
	}
	var doOperation = function(op0,op1) {
		switch(obj.op) {
		case '+': return op0 + op1;
		case '-': return op0 - op1;
		case '*': return op0 * op1;
		case '/': return op0 / op1;
		default: throw "unsupported operator: '" + obj.op + "'.";
		}
	};
	var operands = [];
	if (obj.ops && obj.ops instanceof Array) {
	    for(var i = 0; i < obj.ops.length; i++) {
			operands.push(this.processExpr(obj.ops[i]));
		}
	}
	var res = operands[0];
	for(var i = 1; i < operands.length; i++) {
		res = doOperation(res,operands[i]);
	}
	return res;
};

%}